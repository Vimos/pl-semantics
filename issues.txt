Merging Cuong's fork with main(ToDo)
------------------------------
* Code of running condor is replaced with my scripts for condor. What is still missing is organizging the output and running the scripts on it. 
-Different sets of scripts are required for different data sets, STS, RTE, and Baroni
* Changes in GetPredicatesDeclarationsProbabilisticTheoremProver.scala, HardAssumptionAsEvidenceProbabilisticTheoremProver.scala, InferenceRuleInjectingProbabilisticTheoremProver.scala, AlchemyTheoremProver.scala related to predicates naming _dh, _dt are reverted. Still, it is necessary to declare all predicates as open-world because now evidence predicates are close-world. 
* In AlchemyTheoremProver.scala, there is a function to generate rules based on wordnet, it is commented for now but it should not
* Changes in MergeSameVarPredProbabilisticTheoremProver.scala are reverted. I need to reimplmenet them by, 1)commenting MergeSameVarPredProbabilisticTheoremProver in STS. 2)replace BoxerName with BoxerPred, make sure this applied to Text, Hypothesis and Inference rules as well
* I have no idea what this file does ExistentialEliminatingProbabilisticTheoremProver.scala
* Run the system on Torrento's dataset with their phrases.
//==========================================

-Function: InferenceRuleInjectingProbabilisticTheoremProver.convertParaphraseToFOL is completely wrong. 
espcially, How to map variables from LHS to RHS ? do we use a new Existential Quantifier ? 
Now, the mapping is so messed up. It is as it was implemented by coung
It is even worse. Now, it assumes that the phrases are a list of conjuncted predicates. This is wrong, we have rules contain negations. 

-How to generate rules for phrases. We need a principled way to extract phrases and map them to logical expressions.
Assuming we follow the technique we have now, there still a problem with it. e.g:
 A little boy is playing.	A fat girl is eating.
Phrases are: 
little boy	(correct)
fat girl	(correct)
little boy play	(not sure)
little play	(not sure)
boy play	(not sure)
fat girl eat	(not sure)
girl eat	(not sure)
fat eat		(not sure)
For now, all of them are possible phrases.

-Tokenization and removing special charactgers: 
1)Tokenization details and different modes of tokenization are in utcompling/mlnsemantics/datagen.Tokenize.scala
2)removing special characters: It is two steps, 
(a) removing quotes if the text is quoted before generating inference rules.  
(b) replace special characters with _ before convert to FOL in PredicateCleaningBoxerExpressionInterpreterDecorator
Is this the right place ? Should not it be right before calling MLN/PSL ? would it be better NOT to remove special characters. Instead, replace them with some other characters ?  I will keep it like this for now until I find an example where this needs to be changed. 
In all cases, candc gets somehow confused when parsing special characters. 

-Why Coung is doing all this ReplaceAll in AlchmeyThearomProver ?

-Check the pipeline. Why am I remvoing the existentials ?

-When parsing, WH questions are removed. This can be fixed here: BoxerExpressionParser

-Choung removes "theme" predicates in AlchmeyThearomProver. I have undone that. I am trying to make sure that anything that applies to both MLN and PSL be in a common place.

-Predicates declarations and types has a lot of redundunt code and unused code. The whole thing needs re-coding.

-Finding variables types is disabled because the generation of inference rules does not respect them. Enabling it again requires careful coding for the inference rules generation. In all cases, PSL does not have variables types. 
//==========================================DONE

//==========================================
830: takes 18 minutes: it is slightly changed to avoid this loong wait

597: type
610: type
679: type
803: type
1399: type


825: parsing (%) should be added to the forbidden char
904: parsing (#) should be added to the forbidden char
905: NotEqual: two variables unmatching types
1067: parsing (%) should be added to the forbidden char
1171: parsing (%) should be added to the forbidden char
1341: parsing (@) should be added to the forbidden char

1446: parsing (@) should be added to the forbidden char


remove predicates named topic_

remove _loc_, _nam_ ...


133: wrong parse
564: need a long paraphrasing rule
918: add a rule between two predicates if their characters are matching. E.g sew and sewing. 
940: we do not fix spelling mistakes. Maybe the hack above could help
152: kengaroo. Why do not we remove _POS_ ?? THink carefully about it. 
1321: people vs group of people
1024: wrong parse. pizza vs slice of pizza
245: wrong parse
852: wrong parse
951: wrong spelling of kangaroo. Slightly low weights. Solution on 918 may help a bit
DO WE ALLOW rules between non-matching POS predicates ???
963: terrible wrong parse for a very easy sentence. easy paraphrasing rule: chop up vs dice
1305: terrible wrong parse. No workaround can fix it.
95: wrong parse
1488: boxer's nasty way of doing AND
1040: wrong parse
9: crappy boxing. It needs clever code.
1131: paraprasing: apply butter = puttering, peice of bread vs bread
1449: missed correference resolution. how do handle "neuter" ?
223: wrong parse. 
7: verctor space weight is very very low. 
11: very low combination weights in case of very few lines

1072: try to replace all relations with REL instead of the name
r_of_dt(x, y) <=>  r_on_dt(y, x)
r_and_dh(x, y) => r_and_dh(y,x)

Try BP

Try removing all rel except agent, patient

terrible overestimated in PAR: 674, 531, 541, 712
=========================================================
PSL
2-Is it better to limit number of nulls ? 

3-replace "all" with "default". 

4-grounding of avg, entailment_h & entailment_t >> entailment  does not work correctly if one of the two predicates in the LHS is zero. It works as AND not AVG

5-Timeout: 498, 517, 664
Ill-posed optimization: 960, 1431
Zero because of error 4 above: 592, 924, 1418

============================================================
Logic: 
-Handling negation is wrong.  For now, it is replaced with dummy predicate
-Handling some of the equality contstraints is also wrong
